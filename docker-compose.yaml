version: '3.7'

networks:
  home-server-network:
    name: home-server-network
  keycloak_network:
    driver: bridge

volumes:
  ipmon:
  caddy_data:
    external: true
  caddy_config:
  logdata:
    driver: local

secrets:
  ovh.conf:
    file: ./ovh.conf


services:

  ##############################################################################
  # caddy - reverse proxy
  caddy:
    image: caddy:latest
    restart: unless-stopped
    container_name: caddy
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/caddy_data:/data
      - ./caddy/caddy_config:/config
    networks:
      - home-server-network
  


  ##############################################################################
  # ipmon server
  # Monitors external ip address and updates DNS A record redirect if changed
  # Requires the DNS A Record site name to be specified in the environment 
  # variable DNSARECORD. Easiet way is to use a .env file with an entry, e.g.
  # DNSARECORD=example.com
  ipmon:
    container_name: ipmon
    image: pngan/ipmon:latest
    environment:
      DNSARECORD: ${DNSARECORD}
    restart: unless-stopped
    volumes:
      - 'ipmon:/ipmon'
    networks:
      - home-server-network
    command: "dotnet NetCore.Docker.dll"
    secrets:
      - ovh.conf
    dns:
      - 8.8.8.8     # Google
      - 1.1.1.1     # Cloudflare


  ##############################################################################
  # Ping server
  ping-server:
    container_name: ping
    image: pngan/ping-server
    restart: unless-stopped
    expose:
      - "8000"
    networks:
      - home-server-network

  ##############################################################################
  # secrets test
  secrets_test:
    container_name: secrets_test
    image: alpine:latest
    entrypoint: "cat /run/secrets/ovh.conf"
    secrets:
      - ovh.conf

  ##############################################################################
  # Gamebox server
  gamebox-server:
    container_name: gamebox
    image: pngan/gamebox
    restart: unless-stopped
    networks:
      - home-server-network

  # ##############################################################################
  # # pihole ad blocking dns server
  # # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "8053:80/tcp"
    environment:
      TZ: 'Pacific/Auckland'
      WEBPASSWORD: 'ngan'
    # Volumes store your data between container upgrades
    volumes:
       - './etc-pihole/:/etc/pihole/'
       - './etc-dnsmasq.d/:/etc/dnsmasq.d/'
    dns:
      - 8.8.8.8
      - 1.1.1.1
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    networks:
      - home-server-network
    restart: unless-stopped

  # ##############################################################################
  # Seq Server for logging
  #
  # Test with Postman query: https://docs.datalust.co/docs/posting-raw-events
  seqserver:
    container_name: seq
    image: datalust/seq:latest
    ports:
      - 8020:80
      - 5341:5341
    environment:
      ACCEPT_EULA: 'Y'
    volumes:
      - 'logdata:/data'
    networks:
      - home-server-network
    restart: unless-stopped


  # ##############################################################################
  # transactionsnotes
  #  https://github.com/pngan/transactionnotes 
  #
  # This is home project for downloading bank transactions and attaching notes to them
  #
  # - postgres for keycloak
  # - keycloak for auth
  # - transactionnotes dashboard, api and web
  #

  keycloak_postgres: 
    image: postgres:16.2 # Upgrading this requires deleting postgres_data, which will mean setting up keycloak from scratch
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${KEYCLOAK_POSTGRES_USER} -d ${KEYCLOAK_POSTGRES_DB} -c 'SELECT 1' || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - keycloak_network

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6 # Leave this version. Haven't had much success upgrading to newer version
    command: start
    environment:
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_METRICS_ENABLED: true
      KC_PROXY: edge
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak_postgres/${KEYCLOAK_POSTGRES_DB}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    ports:
      - 8080:8080
    restart: always
    depends_on:
      keycloak_postgres:
        condition: service_healthy
    networks:
      - keycloak_network
      - home-server-network
    logging:
      options:
        max-size: "1m"
        max-file: "3"

  aspire-dashboard:
    container_name: "aspire-dashboard"
    image: "mcr.microsoft.com/dotnet/aspire-dashboard:8.0"
    environment:
      DOTNET_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS: "true"
    ports:
    - target: 18888
      published: 18888
    - target: 18889
      published: 18889
    restart: unless-stopped
    networks:
      - keycloak_network
      - home-server-network
  apiservice:
    container_name: "apiservice"
    image: "pngan/apiservice:latest"
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      HTTP_PORTS: "8080"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://aspire-dashboard:18888"
      OTEL_SERVICE_NAME: "apiservice"
      TRANSNOTES__AUTHORITY: ${AUTHORITY}
      TRANSNOTES__CLIENTSECRET: ${CLIENTSECRET}
      TRANSNOTES__CLIENTID: ${CLIENTID}
      TRANSNOTES__AUDIENCE: ${AUDIENCE}
    restart: unless-stopped
    networks:
      - keycloak_network
      - home-server-network
    logging:
      options:
        max-size: "1m"
        max-file: "3"
    dns:
      - 8.8.8.8     # Google
      - 1.1.1.1     # Cloudflare
      
  webfrontend:

# Before running this docker compose on a new machine, we need to create a stable location for
# storing the data protection keys needed by asp.net
#
# mkdir -p ~/aspnet-dataprotection-keys
# chmod 700 ~/aspnet-dataprotection-keys
# chown $(id -u):$(id -g) ~/aspnet-dataprotection-keys

    container_name: "webfrontend"
    image: "pngan/webfrontend:latest"
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      ASPNETCORE_FORWARDEDHEADERS_ENABLED: "true"
      HTTP_PORTS: "8080"
      services__apiservice__http__0: "http://apiservice:8080"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://aspire-dashboard:18888"
      OTEL_SERVICE_NAME: "webfrontend"
      TRANSNOTES__AUTHORITY: ${AUTHORITY}
      TRANSNOTES__CLIENTSECRET: ${CLIENTSECRET}
      TRANSNOTES__CLIENTID: ${CLIENTID}
      TRANSNOTES__AUDIENCE: ${AUDIENCE}
      ASPNETCORE_ENVIRONMENT: "Development"
    restart: unless-stopped
    networks:
      - keycloak_network
      - home-server-network
    volumes:
      - ./aspnet-dataprotection-keys:/home/app/.aspnet/DataProtection-Keys
    logging:
      options:
        max-size: "1m"
        max-file: "3"
    dns:
      - 8.8.8.8     # Google
      - 1.1.1.1     # Cloudflare
  centraldbserver:
    container_name: "centraldbserver"
    image: "docker.io/library/postgres:17.2"
    environment:
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      POSTGRES_USER: ${CENTRALDBSERVER_USERNAME}
      POSTGRES_PASSWORD: ${CENTRALDBSERVER_PASSWORD}
      POSTGRES_DB: centraldb
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://aspire-dashboard:18889"
      OTEL_SERVICE_NAME: "centraldbserver"
    restart: unless-stopped
    networks:
      - home-server-network
    logging:
      options:
        max-size: "1m"
        max-file: "3"
  centraldb-migration:
    container_name: "centraldb-migration"
    image: "pngan/centraldb-migration:latest"
    environment:
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EXCEPTION_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_EMIT_EVENT_LOG_ATTRIBUTES: "true"
      OTEL_DOTNET_EXPERIMENTAL_OTLP_RETRY: "in_memory"
      ConnectionStrings__centraldb: ${CENTRALDB_CONNECTION_STRING}
      Database__Central__MigrationUser__Username: ${DATABASE_CENTRAL_MIGRATIONUSER_USERNAME}
      Database__Central__MigrationUser__Password: ${DATABASE_CENTRAL_MIGRATIONUSER_PASSWORD}
      Database__Central__AppUser__Username: ${DATABASE_CENTRAL_APPUSER_USERNAME}
      Database__Central__AppUser__Password: ${DATABASE_CENTRAL_APPUSER_PASSWORD}
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://aspire-dashboard:18889"
      OTEL_SERVICE_NAME: "centraldb-migration"
    networks:
      - home-server-network
  #######################################################################
  netshoot:
    image: nicolaka/netshoot
    command: tail -f /dev/null
    networks:
      - keycloak_network
      - home-server-network
    dns:
      - 8.8.8.8     # Google
      - 1.1.1.1     # Cloudflare
